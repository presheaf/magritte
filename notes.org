* Goal
Make something which can take a type-annotated function and make a sensible =argparse.ArgumentParser= for it. Maybe treat return type coroutines as calls to instantiate a session? Or something pipeable? Should be reasonable to wrap a normal-looking function without contorting the code - e.g. ideally just =magritte_dispatch(sorted)= should give you something approaching =sort=.

* Some nice features
** Add a lot of nice defaults like JSON, Path parsing with support for existence checking.
Maybe somehow JSON schema?
** Should be easy to register custom parsers for own types
** Custom exception for throwing a graceful exit with error code?
** Reasonably composable - if you have two different magritte-d scripts, should not be a ton of work to make a megascript importing both and having subparsers

* Tricky stuff
** Need to make parser basically recursive to have any kind of extensibility, but a little tricky to figure out how to e.g. parse a List[List[int]]
** Where should argument documentation go? Set with decorator or parse docstring?

* Example parsings
** Literal -> choose one of
** bool -> flag arguments
** List -> variable number of arguments

* Random thoughts
** Separate functions from those parsing their arguments
Normally you make the function first, then make a parser based off it. However, should be possible to slap a decorator on there for marking any info you'd give the parser, and have it go in a "default" place the parser could look at. Maybe not a big deal tbh?
